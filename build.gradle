buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:5.3.2'
    }
}

plugins {
    // Base
    id 'java'

    // Publishing
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'org.owasp.dependencycheck'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    groupId = 'org.saltyrtc'
    artifactId = 'saltyrtc-task-webrtc'
    libraryVersion = '0.18.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // SaltyRTC
    implementation('org.saltyrtc:saltyrtc-client:[0.14.1,0.15)') {
        exclude group: 'org.json'
        exclude module: 'msgpack-core'
        exclude module: 'jackson-dataformat-msgpack'
    }

    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.30'

    // Dependency: Msgpack serialization
    implementation 'org.msgpack:msgpack-core:[0.8,0.9)'
    implementation 'org.msgpack:jackson-dataformat-msgpack:[0.8.22,0.9)'

    // Override some jackson-dataformat-msgpack 2.9 dependencies due to security vulnerabilities
    implementation ('com.fasterxml.jackson.core:jackson-databind:[2.12,3)') {
        force = true
    }

    // Dependency: Binary chunking
    implementation 'org.saltyrtc:chunked-dc:[1.0,2.0)'

    // Test dependencies
    testImplementation 'com.goterl:lazysodium-java:5.0.1'
    testImplementation 'org.slf4j:slf4j-simple:[1.7,2.0)'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Turn off linting for javadoc
tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// Add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        SaltyRTC(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            groupId = project.ext.groupId
            artifactId = project.ext.artifactId
            version = project.ext.libraryVersion

            pom {
                name = 'SaltyRTC WebRTC Task'
                description = 'Java WebRTC Task library for SaltyRTC'
                url = 'https://saltyrtc.org/'

                scm {
                    url = 'https://github.com/saltyrtc/saltyrtc-task-webrtc-java.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'LICENSE-APACHE'
                    }
                    license {
                        name = 'The MIT License'
                        url = 'LICENSE-MIT'
                    }
                }

                developers {
                    developer {
                        id = 'db'
                        name = 'Danilo Bargen'
                        email = 'danilo.bargen@threema.ch'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    useGpgCmd() // Use gpg-agent. For config options, see `gradle.properties`.
    sign publishing.publications.SaltyRTC
}

dependencyCheck {
    skipConfigurations += 'lintClassPath'
    failBuildOnCVSS 0
}
